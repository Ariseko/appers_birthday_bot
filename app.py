from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime
from keyboards import *
from answersText import *
from questionsText import *

import json
import requests
import sqlite3 as sq

hookURL = 'https://hook.eu1.make.com/wdnwoajce7fgkhylo8wiu6sznxo5kc3u'

base = sq.connect('check.db')
cursor = base.cursor()
base.execute('CREATE TABLE IF NOT EXISTS users (username TEXT UNIQUE)')
base.commit()


class StatesClass(StatesGroup):
    getRealName = State()
    explanation = State()
    julyEventState = State()

    quizStartState = State()
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()
    q6 = State()
    q7 = State()
    q8 = State()
    q9 = State()
    q10 = State()
    quizEnding = State()


storage = MemoryStorage()
bot = Bot(token='6299354069:AAFS1PCkHrWmTD3GH58e2dfKU1PeoMQdUxY')
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message):
    photo = open('static/hello.jpg', 'rb')
    await bot.send_photo(message.from_user.id, photo=photo,
                         caption=f'–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ú—ã ‚Äì <b>–ë–∞–∑—è, –ü–∏–Ω–≥, –Æ–Ω–≥, –¢–∞–ø–∞ –∏ –ü—É—à</b>. –ú—ã –∂–∏–≤–µ–º –≤–æ –≤—Å–µ–º, '
                                 f'—á—Ç–æ –¥–µ–ª–∞–µ—Ç –Ω–∞—à–∞ '
                                 f'–∫–æ–º–ø–∞–Ω–∏—è, –Ω–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å ‚Äì –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∏–ª–∞–π–Ω–∞. \n\n–ê –∫–∞–∫ —Ç–µ–±—è '
                                 f'–∑–æ–≤—É—Ç?\n\n<i>–£–∫–∞–∂–∏ —Å–≤–æ–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é</i>',
                         parse_mode='html')
    await StatesClass.getRealName.set()


@dp.message_handler(state=StatesClass.getRealName)
async def receivingRealName(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['RealName'] = message.text
        data['telegramUsername'] = message.from_user.mention

    await message.answer('–°—É–ø–µ—Ä! –ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–µ–º, —á—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç –≤ —ç—Ç—É –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—É—é –Ω–µ–¥–µ–ª—é. '
                         '–°–ø–æ–π–ª–µ—Ä: –±—É–¥–µ—Ç –º–Ω–æ–æ–æ–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ!\n'
                         '‚Ä¢ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å –ø—Ä–∏–∑–∞–º–∏\n'
                         '‚Ä¢ –ò–Ω—Ç–µ—Ä–≤—å—é —Å –∫–∞–∂–¥—ã–º –∏–∑ –Ω–∞—Å\n'
                         '‚Ä¢ –ö–æ–Ω–∫—É—Ä—Å –¥–µ—Ç—Å–∫–æ–≥–æ —Ä–∏—Å—É–Ω–∫–∞\n'
                         '‚Ä¢ <b>–ü—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ —Ç–æ–∫-—à–æ—É –∏ –∏–≥—Ä–∞ –≤ —á–µ—Å—Ç—å –Ω–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è!</b>\n\n'
                         '–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏, –æ —á–µ–º —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å:', parse_mode='html')

    await message.answer('–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?', reply_markup=mainMenuKeyboard)

    await StatesClass.explanation.set()


@dp.callback_query_handler(state=StatesClass.explanation)
async def distribution(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'aboutUppers':
        photo = open('static/uppers.jpg', 'rb')
        await bot.send_photo(callback.from_user.id, photo=photo,
                             caption=f'–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ –º—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ! –°–∫–æ—Ä–µ–µ –∑–∞—Ö–æ–¥–∏ –Ω–∞ <a '
                                     f'href="https://space.beeline.ru/Regions/retailbusiness/Pages/uppers_hb.aspx'
                                     f'">–ø—Ä–∞–∑–¥–Ω–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É</a>üéâ'
                                     f'\n\n–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞ –Ω–µ–π –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–≤—å—é —Å –æ–¥–Ω–∏–º –∏–∑ –Ω–∞—Å. –ß–µ—Å—Ç–Ω–æ '
                                     f'–≥–æ–≤–æ—Ä—è, —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ –±–µ—Ä—É—Ç –∏–Ω—Ç–µ—Ä–≤—å—é, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ–º–Ω–æ–≥–æ —Å—Ç–µ—Å–Ω—è–µ–º—Å—è. –ü–æ–¥–µ–ª–∏—Å—å '
                                     f'–ø–æ—Ç–æ–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏, –ª–∞–¥–Ω–æ?',
                             parse_mode='html',
                             reply_markup=mainMenuKeyboard)
        await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                            reply_markup=None)

    elif callback.data == '20July':
        photo = open('static/20july.jpg', 'rb')
        await bot.send_photo(callback.from_user.id, photo=photo,
                             caption=f'–£—Ö —Ç—ã, –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!\n–ü—Ä–∞–∑–¥–Ω—É–µ–º 20 –∏—é–ª—è, —Ç—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω!\n–í –ø—Ä–æ–≥—Ä–∞–º–º–µ '
                                     f'‚Äì —Ü–µ–ª—ã–π —Ñ–∏–ª—å–º –ø—Ä–æ –Ω–∞—Å, —Ç–æ–∫-—à–æ—É —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ –∫–æ–º–∞–Ω–¥—ã –∞–ø–ø–µ—Ä–æ–≤ –∏ –ø—Ä–∏–∫–æ–ª—å–Ω–∞—è '
                                     f'–∏–≥—Ä–∞ –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ. –¢—ã –ø—Ä–∏–¥–µ—à—å?',
                             parse_mode='html',
                             reply_markup=julyEventKeyboard)
        await StatesClass.julyEventState.set()
        await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                            reply_markup=None)

    elif callback.data == 'competition':
        photo = open('static/drawing.jpg', 'rb')
        await bot.send_photo(callback.from_user.id, photo=photo,
                             caption=f'–ú—ã —Ç–æ–∂–µ –ª—é–±–∏–º –ø—Ä–∏—è—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –ø–æ–¥–∞—Ä–æ—á–∫–∏, –æ—Å–æ–±–µ–Ω–Ω–æ —Å–¥–µ–ª–∞–Ω–Ω—ã–µ —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏. '
                                     f'–ü–æ—ç—Ç–æ–º—É –æ–±—ä—è–≤–∏–ª–∏ —Å–∞–º—ã–π –º–∏–ª—ã–π —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –∫–æ–Ω–∫—É—Ä—Å –¥–ª—è —é–Ω—ã—Ö –±–∏–ª–∞–π–Ω–æ–≤—Ü–µ–≤. \n<b>–†–∞–±–æ—Ç—ã '
                                     f'–ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –¥–æ 23 –∏—é–ª—è!</b>\n–í—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ç—ã –Ω–∞–π–¥–µ—à—å <a '
                                     f'href="https://space.beeline.ru/Regions/retailbusiness/Pages/uppers_pics.aspx'
                                     f'">–Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.</a>\n–û—Ç–º–µ—á–∞–µ–º –≤–º–µ—Å—Ç–µ!',
                             parse_mode='html',
                             reply_markup=mainMenuKeyboard)
        await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                            reply_markup=None)

    elif callback.data == 'quiz':
        photo = open('static/quiz.jpg', 'rb')

        await bot.send_photo(callback.from_user.id, photo=photo,
                             caption=f'–ú—ã –∑–Ω–∞–µ–º, –∫–∞–∫ —Ç—ã –ª—é–±–∏—à—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏. –°–∞–º–æ–µ '
                                     f'–≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ —Å–∏–ª—ã –∏ –∑–Ω–∞–Ω–∏—è!\n<b>20 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>, –æ—Ç–≤–µ—Ç–∏–≤—à–∏—Ö –Ω–∞ –≤—Å–µ '
                                     f'–≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ—Ö, —Å—Ç–∞–Ω—É—Ç –æ–±–ª–∞–¥–∞—Ç–µ–ª—è–º–∏ –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç '
                                     f'–Ω–∞—Å! <b>–ò–≥—Ä–∞–µ–º –¥–æ 23 –∏—é–ª—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!</b>\n\n–ù–∞—á–∏–Ω–∞–µ–º?',
                             parse_mode='html',
                             reply_markup=isQuizStarting)
        await StatesClass.quizStartState.set()
        await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                            reply_markup=None)


@dp.callback_query_handler(state=StatesClass.julyEventState)
async def julyEvent(callback: types.CallbackQuery):
    if callback.data == 'ochno':
        await bot.send_message(callback.from_user.id,
                               text=f'<a href="https://wheretogo.beeline.ru/hbd_uppers_shk/">–°—Å—ã–ª–∫–∞ –Ω–∞ '
                                    f'—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</a> üßê', parse_mode='html', reply_markup=mainMenuKeyboard)
        await StatesClass.explanation.set()
        await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                            reply_markup=None)
    elif callback.data == 'zoom':
        await bot.send_message(callback.from_user.id,
                               text=f'<a href="https://wheretogo.beeline.ru/hbd_uppers_zoom/">–°—Å—ã–ª–∫–∞ –Ω–∞ '
                                    f'—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</a> üßê', parse_mode='html', reply_markup=mainMenuKeyboard)
        await StatesClass.explanation.set()
        await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                            reply_markup=None)
    else:
        await bot.send_message(callback.from_user.id,
                               text=f'–ñ–∞–ª—å ü•∫\n–ß–µ–º –µ—â–µ –∑–∞–π–º—ë–º—Å—è?', parse_mode='html', reply_markup=mainMenuKeyboard)
        await StatesClass.explanation.set()

        await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                            reply_markup=None)


@dp.callback_query_handler(state=StatesClass.quizStartState)
async def quizStarts(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'start':
        photo = open('static/q1.jpg', 'rb')
        await bot.send_photo(callback.from_user.id, photo=photo,
                             caption=q1Question,
                             parse_mode='html',
                             reply_markup=q1Keyboard)
        now = datetime.now()
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
        async with state.proxy() as data:
            data['quizTimeStart'] = f'{dt_string}'
        await StatesClass.q1.set()

    elif callback.data == 'nope':
        await bot.send_message(callback.from_user.id, text="–¢–æ–≥–¥–∞ –ø–æ–∫–∞ –º–æ–∂–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ –¥—Ä—É–≥–∏–µ –Ω–∞—à–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ üòâ",
                               reply_markup=mainMenuKeyboard)
        await StatesClass.explanation.set()
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)


@dp.callback_query_handler(state=StatesClass.q1)
async def q1Func(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == '–ë':
        async with state.proxy() as data:
            data['counter'] = 1

    photo = open('static/q2.jpg', 'rb')
    photoRobot = open('static/ping1.png', 'rb')

    await bot.send_photo(callback.from_user.id, photo=photoRobot,caption=q1Answer)
    await bot.send_photo(callback.from_user.id, photo=photo,
                         caption=q2Question,
                         reply_markup=q2Keyboard)
    await StatesClass.q2.set()
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)


@dp.callback_query_handler(state=StatesClass.q2)
async def q2Func(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == '–ê':
        async with state.proxy() as data:
            data['counter'] += 1

    photo = open('static/q3.jpg', 'rb')
    await bot.send_message(callback.from_user.id, text=q2Answer)
    await bot.send_photo(callback.from_user.id, photo=photo,
                         caption=q3Question,
                         reply_markup=q3Keyboard)
    await StatesClass.q3.set()
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)


@dp.callback_query_handler(state=StatesClass.q3)
async def q3Func(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == '–í':
        async with state.proxy() as data:
            data['counter'] += 1

    photo = open('static/q4.jpg', 'rb')
    await bot.send_message(callback.from_user.id, text=q3Answer)
    await bot.send_photo(callback.from_user.id, photo=photo,
                         caption=q4Question,
                         reply_markup=q4Keyboard)
    await StatesClass.q4.set()
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)


@dp.callback_query_handler(state=StatesClass.q4)
async def q4Func(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == '–ë':
        async with state.proxy() as data:
            data['counter'] += 1

    photo = open('static/q5.jpg', 'rb')
    await bot.send_message(callback.from_user.id, text=q4Answer)
    await bot.send_photo(callback.from_user.id, photo=photo,
                         caption=q5Question,
                         reply_markup=q5Keyboard)
    await StatesClass.q5.set()
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)


@dp.callback_query_handler(state=StatesClass.q5)
async def q5Func(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == '–ì':
        async with state.proxy() as data:
            data['counter'] += 1

    photo = open('static/q6.jpg', 'rb')
    await bot.send_message(callback.from_user.id, text=q5Answer)
    await bot.send_photo(callback.from_user.id, photo=photo,
                         caption=q6Question,
                         reply_markup=q6Keyboard)
    await StatesClass.q6.set()
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)


@dp.callback_query_handler(state=StatesClass.q6)
async def q6Func(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == '–í':
        async with state.proxy() as data:
            data['counter'] += 1

    photo = open('static/q7.jpg', 'rb')
    await bot.send_message(callback.from_user.id, text=q6Answer)
    await bot.send_photo(callback.from_user.id, photo=photo,
                         caption=q7Question,
                         reply_markup=q7Keyboard)
    await StatesClass.q7.set()
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)


@dp.callback_query_handler(state=StatesClass.q7)
async def q7Func(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == '–í':
        async with state.proxy() as data:
            data['counter'] += 1

    photo = open('static/q8.jpg', 'rb')
    await bot.send_message(callback.from_user.id, text=q7Answer)
    await bot.send_photo(callback.from_user.id, photo=photo,
                         caption=q8Question,
                         reply_markup=q8Keyboard)
    await StatesClass.q8.set()
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)


@dp.callback_query_handler(state=StatesClass.q8)
async def q8Func(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == '–ì':
        async with state.proxy() as data:
            data['counter'] += 1

    photo = open('static/q9.jpg', 'rb')
    await bot.send_message(callback.from_user.id, text=q8Answer)
    await bot.send_photo(callback.from_user.id, photo=photo,
                         caption=q9Question,
                         reply_markup=q9Keyboard)
    await StatesClass.q9.set()
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)


@dp.callback_query_handler(state=StatesClass.q9)
async def q9Func(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == '–ë':
        async with state.proxy() as data:
            data['counter'] += 1

    photo = open('static/q10.jpg', 'rb')
    await bot.send_message(callback.from_user.id, text=q9Answer)
    await bot.send_photo(callback.from_user.id, photo=photo,
                         caption=q10Question,
                         reply_markup=q10Keyboard)
    await StatesClass.q10.set()
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)


@dp.callback_query_handler(state=StatesClass.q10)
async def q10Func(callback: types.CallbackQuery, state: FSMContext):
    now = datetime.now()
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    async with state.proxy() as data:
        if callback.data == '–ê':
            data['counter'] += 1
        dataToSend = {
            "quizTimeStart": f"{data['quizTimeStart']}",
            "quizTimeEnd": f"{dt_string}",
            "telegramUsername": f"{callback.from_user.mention}",
            "RealName": f"{data['RealName']}",
            "rightAnswers": f"{data['counter']}"
        }
        name = cursor.execute(f'SELECT username from users where username = "{callback.from_user.mention}"').fetchone()
        if name is None:
            cursor.execute(f'INSERT INTO users VALUES ("{callback.from_user.mention}")')
            base.commit()
            r = requests.post(hookURL, data=json.dumps(dataToSend), headers={'Content-Type': 'application/json'})
    print(dataToSend)

    photo = open('static/upperNewYear.jpg', 'rb')
    await bot.send_photo(callback.from_user.id, photo=photo, caption=q10Answer)
    await bot.send_message(callback.from_user.id, text="–£—É—É—Ö, —ç—Ç–æ –±—ã–ª–æ –∑–¥–æ—Ä–æ–≤–æ!\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –±—É–¥—É—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã 25 "
                                                       "–∏—é–ª—è! –ê –ø–æ–∫–∞ –º–æ–∂–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ –¥—Ä—É–≥–∏–µ –Ω–∞—à–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                           reply_markup=mainMenuKeyboard)

    await StatesClass.explanation.set()
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)


executor.start_polling(dp, skip_updates=True)
